service: calcutta-admin-api-tournament

package:
  individually: true

plugins:
  - serverless-bundle

custom:
  stage: ${opt:stage, self:provider.stage}
        
provider:
  name: aws
  runtime: nodejs12.x
  timeout: 10
  region: us-east-1
  stage: dev
  environment:
    NODE_ENV: ${self:custom.stage}
    APP_ENV: ${self:custom.stage}
    DB_NAME: ${env:DB_NAME}
    DB_USER: ${env:DB_USER}
    DB_PASSWORD: ${env:DB_PASSWORD}
    DB_HOST:
      Fn::ImportValue: calcutta-db-ec2-${self:custom.stage}-dns-address
    DB_PORT: 1433
      # Fn::ImportValue: calcutta-db-${self:custom.stage}-port
  vpc:
    securityGroupIds:
      - Fn::ImportValue: calcutta-lambdaSG-${self:custom.stage}
    subnetIds:
      - Fn::ImportValue: calcutta-lambda-subnet1-${self:custom.stage}
      - Fn::ImportValue: calcutta-lambda-subnet2-${self:custom.stage}
      - Fn::ImportValue: calcutta-lambda-subnet3-${self:custom.stage}

functions:
  getTournaments:
    handler: functions/getTournaments.getTournaments
    events:
      - http:
          path: getTournaments
          method: get
          integration: lambda
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:
            origin: '*'
            headers:
              - x-cognito-token

  newTournament:
    handler: functions/newTournament.newTournament
    events:
      - http:
          path: newTournament
          method: post
          integration: lambda
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:
            origin: '*'
            headers:
              - Content-Type
              - x-cognito-token

  getTournamentMetadata:
    handler: functions/getTournamentMetadata.getTournamentMetadata
    events:
      - http:
          path: getTournamentMetadata/{tournamentId}
          method: get
          integration: lambda
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:
            origin: '*'
            headers:
              - x-cognito-token

  getTournamentPhases:
    handler: functions/getTournamentPhases.getTournamentPhases
    events:
      - http:
          path: getTournamentPhases/{tournamentId}
          method: get
          integration: lambda
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:
            origin: '*'
            headers:
              - x-cognito-token

  getTournamentRegimes:
    handler: functions/getTournamentRegimes.getTournamentRegimes
    events:
      - http:
          path: getTournamentRegimes/{tournamentId}
          method: get
          integration: lambda
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:
            origin: '*'
            headers:
              - x-cognito-token

  getTournamentRegimePhases:
    handler: functions/getTournamentRegimePhases.getTournamentRegimePhases
    events:
      - http:
          path: getTournamentRegimePhases/{tournamentRegimeId}
          method: get
          integration: lambda
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:
            origin: '*'
            headers:
              - x-cognito-token

  getTournamentRegimeMetadata:
    handler: functions/getTournamentRegimeMetadata.getTournamentRegimeMetadata
    events:
      - http:
          path: getTournamentRegimeMetadata/{tournamentRegimeId}
          method: get
          integration: lambda
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:
            origin: '*'
            headers:
              - x-cognito-token

  getTournamentRegimeSlots:
    handler: functions/getTournamentRegimeSlots.getTournamentRegimeSlots
    events:
      - http:
          path: getTournamentRegimeSlots/{tournamentRegimeId}
          method: get
          integration: lambda
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:
            origin: '*'
            headers:
              - x-cognito-token

  newTournamentPhase:
    handler: functions/newTournamentPhase.newTournamentPhase
    events:
      - http:
          path: newTournamentPhase
          method: post
          integration: lambda
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:
            origin: '*'
            headers:
              - x-cognito-token
              - Content-Type

  deleteTournamentPhase:
    handler: functions/deleteTournamentPhase.deleteTournamentPhase
    events:
      - http:
          path: deleteTournamentPhase
          method: post
          integration: lambda
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:
            origin: '*'
            headers:
              - x-cognito-token
              - Content-Type

  newTournamentRegime:
    handler: functions/newTournamentRegime.newTournamentRegime
    events:
      - http:
          path: newTournamentRegime
          method: post
          integration: lambda
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:
            origin: '*'
            headers:
              - x-cognito-token
              - Content-Type

  deleteTournamentRegime:
    handler: functions/deleteTournamentRegime.deleteTournamentRegime
    events:
      - http:
          path: deleteTournamentRegime
          method: post
          integration: lambda
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:
            origin: '*'
            headers:
              - x-cognito-token
              - Content-Type

  getBracketTypes:
    handler: functions/getBracketTypes.getBracketTypes
    events:
      - http:
          path: getBracketTypes
          method: get
          integration: lambda
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:
            origin: '*'
            headers:
              - x-cognito-token

  setTournamentAdminFlag:
    handler: functions/setTournamentAdminFlag.setTournamentAdminFlag
    events:
      - http:
          path: setTournamentAdminFlag
          method: post
          integration: lambda
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:
            origin: '*'
            headers:
              - x-cognito-token
              - Content-Type

  setTournamentDisabledFlag:
    handler: functions/setTournamentDisabledFlag.setTournamentDisabledFlag
    events:
      - http:
          path: setTournamentDisabledFlag
          method: post
          integration: lambda
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:
            origin: '*'
            headers:
              - x-cognito-token
              - Content-Type

  deleteTournament:
    handler: functions/deleteTournament.deleteTournament
    events:
      - http:
          path: deleteTournament
          method: post
          integration: lambda
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:
            origin: '*'
            headers:
              - x-cognito-token
              - Content-Type

  setTournamentRegimePhases:
    handler: functions/setTournamentRegimePhases.setTournamentRegimePhases
    events:
      - http:
          path: setTournamentRegimePhases
          method: post
          integration: lambda
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:
            origin: '*'
            headers:
              - x-cognito-token
              - Content-Type

  deleteTournamentRegimePhase:
    handler: functions/deleteTournamentRegimePhase.deleteTournamentRegimePhase
    events:
      - http:
          path: deleteTournamentRegimePhase
          method: post
          integration: lambda
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:
            origin: '*'
            headers:
              - x-cognito-token
              - Content-Type

  setTournamentRegimeDescription:
      handler: functions/setTournamentRegimeDescription.setTournamentRegimeDescription
      events:
        - http:
            path: setTournamentRegimeDescription
            method: post
            integration: lambda
            authorizer:
              type: COGNITO_USER_POOLS
              authorizerId:
                Ref: ApiGatewayAuthorizer
            cors:
              origin: '*'
              headers:
                - x-cognito-token
                - Content-Type

  setTournamentRegimeBracketType:
    handler: functions/setTournamentRegimeBracketType.setTournamentRegimeBracketType
    events:
      - http:
          path: setTournamentRegimeBracketType
          method: post
          integration: lambda
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:
            origin: '*'
            headers:
              - x-cognito-token
              - Content-Type

resources:
  - ${file(resources/cognito-authorizer.yml)}